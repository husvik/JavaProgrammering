 import java.io.File;import java.io.FileNotFoundException;import java.io.PrintWriter;import java.lang.reflect.Array;import java.nio.file.Files;import java.nio.file.Paths;import java.util.ArrayList;import java.util.Scanner;/** * Created by danielsteen on 11/05/2017. */public class oppg0905 {    public static void main(String[] args) {        String path = "lorem.txt";        /*        //streamFile(path);        System.out.println();        streamFileAndSplit(path);        System.out.println();        //scanFileLined(path);        System.out.println();        //scanFileSpaced(path);        System.out.println();        * */        ArrayList<dataBeholder> data = new ArrayList<>();        String[] inter = {"navn", "by", "1", "navn", "by", "2"};        for (int i = 0; i < inter.length; i += 3) {            String navn = inter[i];            String by = inter[i + 1];            int befolkning = Integer.parseInt(inter[i + 2]);            data.add(new dataBeholder(navn, by, befolkning));        }        printToFile("results.txt", inter);    }    /***     * Metodikk en     * henter objecter konverterer så til String siden vi VET på FORHÅND at det er strings     * @param path path to file     */    private static void streamFile(String path) {        // Metodikk en,        // Henter ut linjer som objekter i et array        // Konvertere til strings siden vi vet hver linje inneholder det        try {            Object[] collect = Files.lines(Paths.get("./lorem.txt")).toArray();            // .map(line -> line.split(",")).toArray();            for (Object s : collect) {                System.out.println((String) s);            }        } catch (Exception e) {            System.out.println(e);        }    }    /***     *  Metodikk to, Lambda     * før vi konverterer til array endrer vi på listen vår med .map     * .map endrer den eksisterende listen og vi kan få ut string direkte     * .map kan endre data typen listen holder på, som vi gjør under     * .map endrer ikke lengden på listen     * @param path path to file     */    private static void streamFileAndSplit(String path) {        try {            Object[] collect = Files.lines(Paths.get("lorem.txt")).map(line -> line.split("a")).toArray();            //.filter(line -> line.charAt(0) != 'a').toArray(); //.map(line -> line.split(",")).toArray();            ArrayList<String> temp =  new ArrayList<>();            temp.forEach(mittVarNAvn -> {                System.out.println(mittVarNAvn);            });            for (Object o : collect) {                System.out.println(o);            }        } catch (Exception e) {            System.out.println(e);        }    }    /***     * Scanner metodikk en,     * Lager en fil med path, lager scanner ut av filen.     * Har en løkke som fortsetter til scanner ikke har flere linjer med data igjen.     * @param path     */    private static void scanFileLined(String path) {        File file = new File(path);        try {            Scanner sc = new Scanner(file);            while (sc.hasNextLine()) {                System.out.println(sc.nextLine());            }            sc.close();        }        catch (FileNotFoundException e) {            e.printStackTrace();        }    }    /***     * Scanner metodikk to,     * Lager en fil med path, lager scanner ut av filen.     * Har en løkke som fortsetter til scanner ikke har flere mellomrom separerte data.     * @param path     */    private static void scanFileSpaced(String path) {        File file = new File(path);        try {            Scanner sc = new Scanner(file);            while (sc.hasNext()) {                System.out.println(sc.next());            }            sc.close();        }        catch (FileNotFoundException e) {            e.printStackTrace();        }    }    private static void printToFile(String path, String[] content) {        File file = new File(path);        // file.getParentFile().mkdirs();        PrintWriter printWriter = null;        try {            printWriter = new PrintWriter(file);        } catch (Exception e) {            e.printStackTrace();        }        if (printWriter != null) {            for (String line : content) {                printWriter.print(line + "\n");            }            printWriter.close();        }    }}